package com.giacomini.andrea.OCA.ClassDesign.IntroducingClassInheritance;

/*
 * N.B: L'ereditarietà è quel processo mediante il quale una nuova sotto-classe figlia include automaticamente al suo interno qualsiasi
 * 		primitiva "public" o "protected", oggetto o metodo definito nella classe padre.
 * 		Se una classe X eredita da una classe Y, la quale a sua volta eredita da una classe Z, allora X può essere considerata una
 * 		classe figlia indiretta della classe Z.
 * 		JAVA supporta solo una singola ereditarietà, il che significa che una classe piò ereditare SOLO da una classe padre.
 * 		
 * 		JAVA supporta inoltre multipli livelli di ereditarietà, che significa che una classe può estendere un'altra classe,
 * 		la quale a sua volta estende un'altra classe. E' possibile estendere una classe numerose volte, permettendo così
 * 		ad ogni discendente di accedere ai membri del suo antenato.
 * 		
 * 		L'ereditarietà multipla invece permette di avere per una data classe anche più di una classe padre diretta.
 * 		JAVA però non permettere l'applicazione dell'ereditarietà multipla.
 * 		
 * 		L'ereditarietà singola NON preclude la possibilità per una classe padre di avere più classi figle.
 * 		
 * 		JAVA permette anche ad una classe di non essere estesa (e quindi far ereditare i propri membri da una classe figlia)
 * 		inserendo nella sua definizione il modificatore opzionale "final".
 */

public class IntroducingClassInheritance {

	public static void main(String[] args) {
		// TODO Auto-generated method stub

	}

}
