package com.giacomini.andrea.OCP.AdvancedClassDesign.CreatingNestedClasses;

import com.giacomini.andrea.AdvancedClassDesign.CreatingNestedClasses.AnonInner.SaleTodayOnly;

/*
 * N.B: Una "Anonymous Inner class" è una classe innestat locale che non ha un nome. E' dichiarata ed istanziata tutta in un
 *      unico statement usando la parola chiave "new". Le classi inner anonime sono richieste per estenedere una classe
 *      esistente o per implementare un'interfaccia esistente. Sono utili quando si ha una breve implementazione che non verrà
 *      utilizzata altrove. 
 *      Di seguito un esempio "AnonInner". Viene definita una classe abstract "SaleTodayOnly". Il pezzo di codice:
 *         
 *        	SaleTodayOnly sale = new SaleTodayOnly() {
 *			
 *				int dollarOff() { return 3; }
 *			};
 *
 *		definisce la classe innestata. Si noti come questa classe innestata non ha un nome. Il codice dice di istanziare 
 *		un nuovo oggetto "SaleTodayOnly". Anche se "SaleTodayOnly" è una classe abstract, questo è permesso perché si fornisce
 *		il corpo della classe in modo anonimo. 
 *		Si presti attenzione al (;) alla fine di questo pezzo di codice. Si stà dichiarando una variabile locale su queste linee.
 *		La dichiarazione di variabili locali richiede che alla fine si termini con un (;), esattamente come per tutti gli
 *		altri statement Java, anche se sono lunghi e contengono classi innestate anonime. 
 *  	
 *  	Ora vediamo come convertire questo stesso esempio per implementare un'interfaccia invece di estendere una classe
 *  	astratta ("AnonInner2"). La cosa più interessante da notare qui è come sia cambiato poco. Viene dichiarata un'interfaccia
 *  	("SaleTodayOnly") invece di una classe astratta. Il modificatore d'accesso sulla linea "public int dollarsOff(){ return 3; }"
 *  	è PUBLIC invece che usare l'accesso di default perché tutti i metodi delle interfacce si assume essere PUBLIC.
 *  	La classe inner anonima è la stessa sia che si implementi un'interfaccia sia che si estanda una classe.
 *  	Java capisce quale si vuole automaticamente.
 *  	
 *  	Ma cosa succede se si vuole sia estendere una classe che implementare un'interfaccia? Non è possibile farlo con una
 *  	classe inner anonima, a meno che la classe da estendere sia "java.lang.Object". La classe "Object" è una classe
 *  	speciale e per questo motivo è l'eccezione che conferma la regola. Si ricordi che una classe inner anonima è
 *  	semplicemente una classe inner locale senza un nome. E' possibile scrivere una classe inner locale e dargli
 *  	un nome se si ha questo problema. Così facendo si potrà estendere una classe ed implementare più interfacce.
 *  	Se si ha un codice complesso, una classe inner locale non sarà l'opzione più ovvia per avere un codice di facile
 *  	lettura.
 *  	
 *  	C'è un'altra cosa che si può fare con le classi inner anonime. E' possibile definirle esattamente dove servono
 *  	anche se è un'argomento di un'altro metodo.
 *  	Il codice dell'esempio "AnonInner2"
 *  
 *    		return admission(5, new SaleTodayOnly() { 
 *    
 *    									public int dollarsOff() { return 3; } 
 *    
 *    							} 
 *    						);
 *    
 *    	definisce una classe inner anonima. Non viene nemmeno memorizzata in una variabile locale. Invece, viene
 *    	passata direttamente al metodo che ne ha bisogno. Leggere questo stile di codice richiede tempo per abituarsi.
 *    	Ma si tratta di un modo conciso di creare una classe che si userà una sola volta. Si vedrà più avanti, al capitolo
 *    	"Functional Programming", un modo più concisono di codificarle.
 */

public class AnonymousInnerClasses {

	public static void main(String[] args){
		
	}
}

class AnonInner {
	
	// Classe astratta;
	abstract class SaleTodayOnly {
		
		abstract int dollarOff();
	}
	
	public int admission(int basePrice){
		
		// Class innestata;
		SaleTodayOnly sale = new SaleTodayOnly() {
			
			int dollarOff() { return 3; }
		};
		
		return basePrice - sale.dollarOff();
	}
}

class AnonInner2 {
	
	// Interfaccia;
	interface SaleTodayOnly {
		
		int dollarsOff();
	}
	
	public int admission(int basePrice){
		
		SaleTodayOnly sale = new SaleTodayOnly() {
			
			public int dollarsOff(){ return 3; }
		};
		
		return basePrice - sale.dollarsOff(); 
	}
	
	public int pay(){
		
		return admission(5, new SaleTodayOnly() { public int dollarsOff() { return 3; } } );
	}
	
	public int admission(int basePrice, SaleTodayOnly sale) {
		
		return basePrice - sale.dollarsOff();
	}
}
